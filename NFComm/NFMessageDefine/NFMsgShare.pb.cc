// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace NFMsg {
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGameServer>
      _instance;
} _ReqEnterGameServer_default_instance_;
class ReqAckEnterGameSuccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckEnterGameSuccess>
      _instance;
} _ReqAckEnterGameSuccess_default_instance_;
class ReqHeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHeartBeat>
      _instance;
} _ReqHeartBeat_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveGameServer>
      _instance;
} _ReqLeaveGameServer_default_instance_;
class PlayerEntryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEntryInfo>
      _instance;
} _PlayerEntryInfo_default_instance_;
class AckPlayerEntryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerEntryList>
      _instance;
} _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerLeaveList>
      _instance;
} _AckPlayerLeaveList_default_instance_;
class PosSyncUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PosSyncUnit>
      _instance;
} _PosSyncUnit_default_instance_;
class ReqAckPlayerPosSyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerPosSync>
      _instance;
} _ReqAckPlayerPosSync_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EffectData>
      _instance;
} _EffectData_default_instance_;
class ReqAckUseSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseSkill>
      _instance;
} _ReqAckUseSkill_default_instance_;
class ReqAckSwapSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSwapScene>
      _instance;
} _ReqAckSwapScene_default_instance_;
class ReqAckPlayerChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerChat>
      _instance;
} _ReqAckPlayerChat_default_instance_;
}  // namespace NFMsg
namespace protobuf_NFMsgShare_2eproto {
void InitDefaultsReqEnterGameServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::NFMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqEnterGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

void InitDefaultsReqEnterGameServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqEnterGameServerImpl);
}

void InitDefaultsReqAckEnterGameSuccessImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::NFMsg::_ReqAckEnterGameSuccess_default_instance_;
    new (ptr) ::NFMsg::ReqAckEnterGameSuccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckEnterGameSuccess::InitAsDefaultInstance();
}

void InitDefaultsReqAckEnterGameSuccess() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckEnterGameSuccessImpl);
}

void InitDefaultsReqHeartBeatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::NFMsg::_ReqHeartBeat_default_instance_;
    new (ptr) ::NFMsg::ReqHeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHeartBeat::InitAsDefaultInstance();
}

void InitDefaultsReqHeartBeat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqHeartBeatImpl);
}

void InitDefaultsReqLeaveGameServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::NFMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

void InitDefaultsReqLeaveGameServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqLeaveGameServerImpl);
}

void InitDefaultsPlayerEntryInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::NFMsg::_PlayerEntryInfo_default_instance_;
    new (ptr) ::NFMsg::PlayerEntryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PlayerEntryInfo::InitAsDefaultInstance();
}

void InitDefaultsPlayerEntryInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerEntryInfoImpl);
}

void InitDefaultsAckPlayerEntryListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgShare_2eproto::InitDefaultsPlayerEntryInfo();
  {
    void* ptr = &::NFMsg::_AckPlayerEntryList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerEntryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerEntryList::InitAsDefaultInstance();
}

void InitDefaultsAckPlayerEntryList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckPlayerEntryListImpl);
}

void InitDefaultsAckPlayerLeaveListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::NFMsg::_AckPlayerLeaveList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerLeaveList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerLeaveList::InitAsDefaultInstance();
}

void InitDefaultsAckPlayerLeaveList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckPlayerLeaveListImpl);
}

void InitDefaultsPosSyncUnitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_NFMsgBase_2eproto::InitDefaultsVector3();
  {
    void* ptr = &::NFMsg::_PosSyncUnit_default_instance_;
    new (ptr) ::NFMsg::PosSyncUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PosSyncUnit::InitAsDefaultInstance();
}

void InitDefaultsPosSyncUnit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPosSyncUnitImpl);
}

void InitDefaultsReqAckPlayerPosSyncImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgShare_2eproto::InitDefaultsPosSyncUnit();
  {
    void* ptr = &::NFMsg::_ReqAckPlayerPosSync_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerPosSync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerPosSync::InitAsDefaultInstance();
}

void InitDefaultsReqAckPlayerPosSync() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckPlayerPosSyncImpl);
}

void InitDefaultsEffectDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::NFMsg::_EffectData_default_instance_;
    new (ptr) ::NFMsg::EffectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::EffectData::InitAsDefaultInstance();
}

void InitDefaultsEffectData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEffectDataImpl);
}

void InitDefaultsReqAckUseSkillImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  protobuf_NFMsgShare_2eproto::InitDefaultsEffectData();
  {
    void* ptr = &::NFMsg::_ReqAckUseSkill_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseSkill::InitAsDefaultInstance();
}

void InitDefaultsReqAckUseSkill() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckUseSkillImpl);
}

void InitDefaultsReqAckSwapSceneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::NFMsg::_ReqAckSwapScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckSwapScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSwapScene::InitAsDefaultInstance();
}

void InitDefaultsReqAckSwapScene() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckSwapSceneImpl);
}

void InitDefaultsReqAckPlayerChatImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NFMsgBase_2eproto::InitDefaultsIdent();
  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat::InitAsDefaultInstance();
}

void InitDefaultsReqAckPlayerChat() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqAckPlayerChatImpl);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, arg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHeartBeat, arg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, arg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, object_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, career_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, player_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PosSyncUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PosSyncUnit, mover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PosSyncUnit, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PosSyncUnit, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PosSyncUnit, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PosSyncUnit, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, sync_unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_rlt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, client_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, server_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, effect_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, transfer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::ReqEnterGameServer)},
  { 9, -1, sizeof(::NFMsg::ReqAckEnterGameSuccess)},
  { 15, -1, sizeof(::NFMsg::ReqHeartBeat)},
  { 21, -1, sizeof(::NFMsg::ReqLeaveGameServer)},
  { 27, -1, sizeof(::NFMsg::PlayerEntryInfo)},
  { 41, -1, sizeof(::NFMsg::AckPlayerEntryList)},
  { 47, -1, sizeof(::NFMsg::AckPlayerLeaveList)},
  { 53, -1, sizeof(::NFMsg::PosSyncUnit)},
  { 63, -1, sizeof(::NFMsg::ReqAckPlayerPosSync)},
  { 70, -1, sizeof(::NFMsg::EffectData)},
  { 78, -1, sizeof(::NFMsg::ReqAckUseSkill)},
  { 88, -1, sizeof(::NFMsg::ReqAckSwapScene)},
  { 100, -1, sizeof(::NFMsg::ReqAckPlayerChat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckEnterGameSuccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PosSyncUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerPosSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_EffectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckUseSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckSwapScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerChat_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "NFMsgShare.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
      "o\032\017NFMsgBase.proto\"^\n\022ReqEnterGameServer"
      "\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\022\017\n\007account\030\002 "
      "\001(\014\022\017\n\007game_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\"%\n\026Re"
      "qAckEnterGameSuccess\022\013\n\003arg\030\001 \001(\005\"\033\n\014Req"
      "HeartBeat\022\013\n\003arg\030\001 \001(\005\"!\n\022ReqLeaveGameSe"
      "rver\022\013\n\003arg\030\001 \001(\005\"\267\001\n\017PlayerEntryInfo\022!\n"
      "\013object_guid\030\001 \001(\0132\014.NFMsg.Ident\022\t\n\001x\030\002 "
      "\001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\023\n\013career_type"
      "\030\005 \001(\005\022\024\n\014player_state\030\006 \001(\005\022\021\n\tconfig_i"
      "d\030\007 \001(\014\022\020\n\010scene_id\030\010 \001(\005\022\020\n\010class_id\030\t "
      "\001(\014\"A\n\022AckPlayerEntryList\022+\n\013object_list"
      "\030\001 \003(\0132\026.NFMsg.PlayerEntryInfo\"7\n\022AckPla"
      "yerLeaveList\022!\n\013object_list\030\001 \003(\0132\014.NFMs"
      "g.Ident\"\345\001\n\013PosSyncUnit\022\033\n\005mover\030\001 \001(\0132\014"
      ".NFMsg.Ident\022\033\n\003pos\030\002 \001(\0132\016.NFMsg.Vector"
      "3\022#\n\013orientation\030\003 \001(\0132\016.NFMsg.Vector3\022\016"
      "\n\006status\030\004 \001(\005\022*\n\004type\030\005 \001(\0162\034.NFMsg.Pos"
      "SyncUnit.EMoveType\";\n\tEMoveType\022\014\n\010EMT_W"
      "ALK\020\000\022\016\n\nEET_SPEEDY\020\001\022\020\n\014EET_TELEPORT\020\002\""
      "N\n\023ReqAckPlayerPosSync\022\020\n\010sequence\030\001 \001(\005"
      "\022%\n\tsync_unit\030\002 \003(\0132\022.NFMsg.PosSyncUnit\""
      "\341\001\n\nEffectData\022\"\n\014effect_ident\030\001 \001(\0132\014.N"
      "FMsg.Ident\022\024\n\014effect_value\030\002 \001(\005\0221\n\neffe"
      "ct_rlt\030\003 \001(\0162\035.NFMsg.EffectData.EResultT"
      "ype\"f\n\013EResultType\022\014\n\010EET_FAIL\020\000\022\017\n\013EET_"
      "SUCCESS\020\001\022\016\n\nEET_REFUSE\020\002\022\014\n\010EET_MISS\020\003\022"
      "\014\n\010EET_CRIT\020\004\022\014\n\010EET_ULTI\020\005\"\222\001\n\016ReqAckUs"
      "eSkill\022\032\n\004user\030\001 \001(\0132\014.NFMsg.Ident\022\020\n\010sk"
      "ill_id\030\002 \001(\014\022\024\n\014client_index\030\003 \001(\005\022\024\n\014se"
      "rver_index\030\004 \001(\003\022&\n\013effect_data\030\005 \003(\0132\021."
      "NFMsg.EffectData\"z\n\017ReqAckSwapScene\022\025\n\rt"
      "ransfer_type\030\001 \001(\005\022\020\n\010scene_id\030\002 \001(\005\022\017\n\007"
      "line_id\030\003 \001(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z"
      "\030\006 \001(\002\022\014\n\004data\030\007 \001(\014\"\347\002\n\020ReqAckPlayerCha"
      "t\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ident\022\023\n\013pl"
      "ayer_name\030\002 \001(\014\022>\n\014chat_channel\030\003 \001(\0162(."
      "NFMsg.ReqAckPlayerChat.EGameChatChannel\022"
      "8\n\tchat_type\030\004 \001(\0162%.NFMsg.ReqAckPlayerC"
      "hat.EGameChatType\022\021\n\tchat_info\030\005 \001(\014\"P\n\020"
      "EGameChatChannel\022\017\n\013EGCC_GLOBAL\020\000\022\r\n\tEGC"
      "C_CLAN\020\001\022\r\n\tEGCC_ROOM\020\002\022\r\n\tEGCC_TEAM\020\003\">"
      "\n\rEGameChatType\022\r\n\tEGCT_TEXT\020\000\022\016\n\nEGCT_V"
      "OICE\020\001\022\016\n\nEGCT_EMOJI\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1750);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgShare.proto", &protobuf_RegisterTypes);
  ::protobuf_NFDefine_2eproto::AddDescriptors();
  ::protobuf_NFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NFMsgShare_2eproto
namespace NFMsg {
const ::google::protobuf::EnumDescriptor* PosSyncUnit_EMoveType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[0];
}
bool PosSyncUnit_EMoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PosSyncUnit_EMoveType PosSyncUnit::EMT_WALK;
const PosSyncUnit_EMoveType PosSyncUnit::EET_SPEEDY;
const PosSyncUnit_EMoveType PosSyncUnit::EET_TELEPORT;
const PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MIN;
const PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MAX;
const int PosSyncUnit::EMoveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[1];
}
bool EffectData_EResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EffectData_EResultType EffectData::EET_FAIL;
const EffectData_EResultType EffectData::EET_SUCCESS;
const EffectData_EResultType EffectData::EET_REFUSE;
const EffectData_EResultType EffectData::EET_MISS;
const EffectData_EResultType EffectData::EET_CRIT;
const EffectData_EResultType EffectData::EET_ULTI;
const EffectData_EResultType EffectData::EResultType_MIN;
const EffectData_EResultType EffectData::EResultType_MAX;
const int EffectData::EResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[2];
}
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GLOBAL;
const ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_CLAN;
const ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_ROOM;
const ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_TEAM;
const ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MIN;
const ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MAX;
const int ReqAckPlayerChat::EGameChatChannel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[3];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEXT;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_VOICE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_EMOJI;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqEnterGameServer::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGameServer::kIdFieldNumber;
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqEnterGameServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_id_));
  _cached_size_ = 0;
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqEnterGameServer();
  return *internal_default_instance();
}

ReqEnterGameServer* ReqEnterGameServer::New(::google::protobuf::Arena* arena) const {
  ReqEnterGameServer* n = new ReqEnterGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  game_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEnterGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEnterGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEnterGameServer)
  return false;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEnterGameServer)
}

::google::protobuf::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  account_.Swap(&other->account_);
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckEnterGameSuccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckEnterGameSuccess::kArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckEnterGameSuccess::ReqAckEnterGameSuccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckEnterGameSuccess();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckEnterGameSuccess)
}
ReqAckEnterGameSuccess::ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckEnterGameSuccess)
}

void ReqAckEnterGameSuccess::SharedCtor() {
  arg_ = 0;
  _cached_size_ = 0;
}

ReqAckEnterGameSuccess::~ReqAckEnterGameSuccess() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckEnterGameSuccess)
  SharedDtor();
}

void ReqAckEnterGameSuccess::SharedDtor() {
}

void ReqAckEnterGameSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckEnterGameSuccess::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckEnterGameSuccess& ReqAckEnterGameSuccess::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckEnterGameSuccess();
  return *internal_default_instance();
}

ReqAckEnterGameSuccess* ReqAckEnterGameSuccess::New(::google::protobuf::Arena* arena) const {
  ReqAckEnterGameSuccess* n = new ReqAckEnterGameSuccess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckEnterGameSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckEnterGameSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckEnterGameSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckEnterGameSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckEnterGameSuccess)
  return false;
#undef DO_
}

void ReqAckEnterGameSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckEnterGameSuccess)
}

::google::protobuf::uint8* ReqAckEnterGameSuccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckEnterGameSuccess)
  return target;
}

size_t ReqAckEnterGameSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckEnterGameSuccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckEnterGameSuccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEnterGameSuccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckEnterGameSuccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckEnterGameSuccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckEnterGameSuccess)
    MergeFrom(*source);
  }
}

void ReqAckEnterGameSuccess::MergeFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqAckEnterGameSuccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEnterGameSuccess::CopyFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEnterGameSuccess::IsInitialized() const {
  return true;
}

void ReqAckEnterGameSuccess::Swap(ReqAckEnterGameSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckEnterGameSuccess::InternalSwap(ReqAckEnterGameSuccess* other) {
  using std::swap;
  swap(arg_, other->arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckEnterGameSuccess::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHeartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHeartBeat::kArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqHeartBeat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHeartBeat)
}
ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
  arg_ = 0;
  _cached_size_ = 0;
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqHeartBeat();
  return *internal_default_instance();
}

ReqHeartBeat* ReqHeartBeat::New(::google::protobuf::Arena* arena) const {
  ReqHeartBeat* n = new ReqHeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqHeartBeat)
  return false;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqHeartBeat)
}

::google::protobuf::uint8* ReqHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHeartBeat)
  return target;
}

size_t ReqHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHeartBeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  using std::swap;
  swap(arg_, other->arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLeaveGameServer::kArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqLeaveGameServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  arg_ = 0;
  _cached_size_ = 0;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqLeaveGameServer();
  return *internal_default_instance();
}

ReqLeaveGameServer* ReqLeaveGameServer::New(::google::protobuf::Arena* arena) const {
  ReqLeaveGameServer* n = new ReqLeaveGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqLeaveGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqLeaveGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqLeaveGameServer)
  return false;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqLeaveGameServer)
}

::google::protobuf::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  swap(arg_, other->arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEntryInfo::InitAsDefaultInstance() {
  ::NFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->object_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaNoVirtual() == NULL && object_guid_ != NULL) {
    delete object_guid_;
  }
  object_guid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kXFieldNumber;
const int PlayerEntryInfo::kYFieldNumber;
const int PlayerEntryInfo::kZFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsPlayerEntryInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_id().size() > 0) {
    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_id().size() > 0) {
    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    object_guid_ = new ::NFMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
  _cached_size_ = 0;
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsPlayerEntryInfo();
  return *internal_default_instance();
}

PlayerEntryInfo* PlayerEntryInfo::New(::google::protobuf::Arena* arena) const {
  PlayerEntryInfo* n = new PlayerEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && object_guid_ != NULL) {
    delete object_guid_;
  }
  object_guid_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PlayerEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident object_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 career_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes config_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes class_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PlayerEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PlayerEntryInfo)
  return false;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->object_guid_, output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career_type(), output);
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_state(), output);
  }

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->config_id(), output);
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->class_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PlayerEntryInfo)
}

::google::protobuf::uint8* PlayerEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->object_guid_, deterministic, target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career_type(), target);
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_state(), target);
  }

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->config_id(), target);
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->class_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->class_id());
  }

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_guid_);
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PlayerEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.class_id().size() > 0) {

    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    mutable_object_guid()->::NFMsg::Ident::MergeFrom(from.object_guid());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.career_type() != 0) {
    set_career_type(from.career_type());
  }
  if (from.player_state() != 0) {
    set_player_state(from.player_state());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  config_id_.Swap(&other->config_id_);
  class_id_.Swap(&other->class_id_);
  swap(object_guid_, other->object_guid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(career_type_, other->career_type_);
  swap(player_state_, other->player_state_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerEntryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsAckPlayerEntryList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
  _cached_size_ = 0;
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsAckPlayerEntryList();
  return *internal_default_instance();
}

AckPlayerEntryList* AckPlayerEntryList::New(::google::protobuf::Arena* arena) const {
  AckPlayerEntryList* n = new AckPlayerEntryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPlayerEntryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPlayerEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPlayerEntryList)
  return false;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPlayerEntryList)
}

::google::protobuf::uint8* AckPlayerEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerEntryList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  object_list_.InternalSwap(&other->object_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerLeaveList::InitAsDefaultInstance() {
}
void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsAckPlayerLeaveList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
  _cached_size_ = 0;
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsAckPlayerLeaveList();
  return *internal_default_instance();
}

AckPlayerLeaveList* AckPlayerLeaveList::New(::google::protobuf::Arena* arena) const {
  AckPlayerLeaveList* n = new AckPlayerLeaveList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPlayerLeaveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPlayerLeaveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPlayerLeaveList)
  return false;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPlayerLeaveList)
}

::google::protobuf::uint8* AckPlayerLeaveList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Ident object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerLeaveList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerLeaveList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  object_list_.InternalSwap(&other->object_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PosSyncUnit::InitAsDefaultInstance() {
  ::NFMsg::_PosSyncUnit_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PosSyncUnit_default_instance_._instance.get_mutable()->pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_PosSyncUnit_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
void PosSyncUnit::clear_mover() {
  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
}
void PosSyncUnit::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
void PosSyncUnit::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PosSyncUnit::kMoverFieldNumber;
const int PosSyncUnit::kPosFieldNumber;
const int PosSyncUnit::kOrientationFieldNumber;
const int PosSyncUnit::kStatusFieldNumber;
const int PosSyncUnit::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PosSyncUnit::PosSyncUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsPosSyncUnit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PosSyncUnit)
}
PosSyncUnit::PosSyncUnit(const PosSyncUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::NFMsg::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::NFMsg::Vector3(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PosSyncUnit)
}

void PosSyncUnit::SharedCtor() {
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(type_));
  _cached_size_ = 0;
}

PosSyncUnit::~PosSyncUnit() {
  // @@protoc_insertion_point(destructor:NFMsg.PosSyncUnit)
  SharedDtor();
}

void PosSyncUnit::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete orientation_;
}

void PosSyncUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosSyncUnit::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PosSyncUnit& PosSyncUnit::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsPosSyncUnit();
  return *internal_default_instance();
}

PosSyncUnit* PosSyncUnit::New(::google::protobuf::Arena* arena) const {
  PosSyncUnit* n = new PosSyncUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PosSyncUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PosSyncUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool PosSyncUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PosSyncUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident mover = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Vector3 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Vector3 orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.PosSyncUnit.EMoveType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NFMsg::PosSyncUnit_EMoveType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PosSyncUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PosSyncUnit)
  return false;
#undef DO_
}

void PosSyncUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PosSyncUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mover_, output);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // .NFMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PosSyncUnit)
}

::google::protobuf::uint8* PosSyncUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PosSyncUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->mover_, deterministic, target);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pos_, deterministic, target);
  }

  // .NFMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->orientation_, deterministic, target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PosSyncUnit)
  return target;
}

size_t PosSyncUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PosSyncUnit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mover_);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos_);
  }

  // .NFMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->orientation_);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosSyncUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const PosSyncUnit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PosSyncUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PosSyncUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PosSyncUnit)
    MergeFrom(*source);
  }
}

void PosSyncUnit::MergeFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mover()) {
    mutable_mover()->::NFMsg::Ident::MergeFrom(from.mover());
  }
  if (from.has_pos()) {
    mutable_pos()->::NFMsg::Vector3::MergeFrom(from.pos());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::NFMsg::Vector3::MergeFrom(from.orientation());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PosSyncUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSyncUnit::CopyFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSyncUnit::IsInitialized() const {
  return true;
}

void PosSyncUnit::Swap(PosSyncUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PosSyncUnit::InternalSwap(PosSyncUnit* other) {
  using std::swap;
  swap(mover_, other->mover_);
  swap(pos_, other->pos_);
  swap(orientation_, other->orientation_);
  swap(status_, other->status_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PosSyncUnit::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerPosSync::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerPosSync::kSequenceFieldNumber;
const int ReqAckPlayerPosSync::kSyncUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerPosSync::ReqAckPlayerPosSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckPlayerPosSync();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerPosSync)
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sync_unit_(from.sync_unit_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerPosSync)
}

void ReqAckPlayerPosSync::SharedCtor() {
  sequence_ = 0;
  _cached_size_ = 0;
}

ReqAckPlayerPosSync::~ReqAckPlayerPosSync() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerPosSync)
  SharedDtor();
}

void ReqAckPlayerPosSync::SharedDtor() {
}

void ReqAckPlayerPosSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerPosSync::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerPosSync& ReqAckPlayerPosSync::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckPlayerPosSync();
  return *internal_default_instance();
}

ReqAckPlayerPosSync* ReqAckPlayerPosSync::New(::google::protobuf::Arena* arena) const {
  ReqAckPlayerPosSync* n = new ReqAckPlayerPosSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckPlayerPosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerPosSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sync_unit_.Clear();
  sequence_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckPlayerPosSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerPosSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PosSyncUnit sync_unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sync_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerPosSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerPosSync)
  return false;
#undef DO_
}

void ReqAckPlayerPosSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerPosSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence(), output);
  }

  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sync_unit_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sync_unit(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerPosSync)
}

::google::protobuf::uint8* ReqAckPlayerPosSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerPosSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence(), target);
  }

  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sync_unit_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sync_unit(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerPosSync)
  return target;
}

size_t ReqAckPlayerPosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerPosSync)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sync_unit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sync_unit(static_cast<int>(i)));
    }
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerPosSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerPosSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerPosSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerPosSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerPosSync)
    MergeFrom(*source);
  }
}

void ReqAckPlayerPosSync::MergeFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sync_unit_.MergeFrom(from.sync_unit_);
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void ReqAckPlayerPosSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerPosSync::CopyFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerPosSync::IsInitialized() const {
  return true;
}

void ReqAckPlayerPosSync::Swap(ReqAckPlayerPosSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerPosSync::InternalSwap(ReqAckPlayerPosSync* other) {
  using std::swap;
  sync_unit_.InternalSwap(&other->sync_unit_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckPlayerPosSync::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
  ::NFMsg::_EffectData_default_instance_._instance.get_mutable()->effect_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void EffectData::clear_effect_ident() {
  if (GetArenaNoVirtual() == NULL && effect_ident_ != NULL) {
    delete effect_ident_;
  }
  effect_ident_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectData::kEffectIdentFieldNumber;
const int EffectData::kEffectValueFieldNumber;
const int EffectData::kEffectRltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectData::EffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsEffectData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_effect_ident()) {
    effect_ident_ = new ::NFMsg::Ident(*from.effect_ident_);
  } else {
    effect_ident_ = NULL;
  }
  ::memcpy(&effect_value_, &from.effect_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_rlt_) -
    reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.EffectData)
}

void EffectData::SharedCtor() {
  ::memset(&effect_ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_ident_)) + sizeof(effect_rlt_));
  _cached_size_ = 0;
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:NFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != internal_default_instance()) delete effect_ident_;
}

void EffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EffectData& EffectData::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsEffectData();
  return *internal_default_instance();
}

EffectData* EffectData::New(::google::protobuf::Arena* arena) const {
  EffectData* n = new EffectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && effect_ident_ != NULL) {
    delete effect_ident_;
  }
  effect_ident_ = NULL;
  ::memset(&effect_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  _internal_metadata_.Clear();
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.EffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident effect_ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_effect_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 effect_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.EffectData.EResultType effect_rlt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_effect_rlt(static_cast< ::NFMsg::EffectData_EResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.EffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.EffectData)
  return false;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->effect_ident_, output);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_rlt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.EffectData)
}

::google::protobuf::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->effect_ident_, deterministic, target);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_rlt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.EffectData)
  return target;
}

size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.EffectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->effect_ident_);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.EffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_effect_ident()) {
    mutable_effect_ident()->::NFMsg::Ident::MergeFrom(from.effect_ident());
  }
  if (from.effect_value() != 0) {
    set_effect_value(from.effect_value());
  }
  if (from.effect_rlt() != 0) {
    set_effect_rlt(from.effect_rlt());
  }
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  swap(effect_ident_, other->effect_ident_);
  swap(effect_value_, other->effect_value_);
  swap(effect_rlt_, other->effect_rlt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseSkill::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckUseSkill::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kClientIndexFieldNumber;
const int ReqAckUseSkill::kServerIndexFieldNumber;
const int ReqAckUseSkill::kEffectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckUseSkill();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseSkill)
}
ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      effect_data_(from.effect_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skill_id().size() > 0) {
    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  ::memcpy(&server_index_, &from.server_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_index_) -
    reinterpret_cast<char*>(&server_index_)) + sizeof(client_index_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_index_) -
      reinterpret_cast<char*>(&user_)) + sizeof(client_index_));
  _cached_size_ = 0;
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckUseSkill();
  return *internal_default_instance();
}

ReqAckUseSkill* ReqAckUseSkill::New(::google::protobuf::Arena* arena) const {
  ReqAckUseSkill* n = new ReqAckUseSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  ::memset(&server_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_index_) -
      reinterpret_cast<char*>(&server_index_)) + sizeof(client_index_));
  _internal_metadata_.Clear();
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 client_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 server_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckUseSkill)
  return false;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->skill_id(), output);
  }

  // int32 client_index = 3;
  if (this->client_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_index(), output);
  }

  // int64 server_index = 4;
  if (this->server_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->server_index(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->effect_data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckUseSkill)
}

::google::protobuf::uint8* ReqAckUseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->user_, deterministic, target);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->skill_id(), target);
  }

  // int32 client_index = 3;
  if (this->client_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_index(), target);
  }

  // int64 server_index = 4;
  if (this->server_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->server_index(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseSkill)
  return target;
}

size_t ReqAckUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.EffectData effect_data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_id());
  }

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->user_);
  }

  // int64 server_index = 4;
  if (this->server_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_index());
  }

  // int32 client_index = 3;
  if (this->client_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.skill_id().size() > 0) {

    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
  }
  if (from.server_index() != 0) {
    set_server_index(from.server_index());
  }
  if (from.client_index() != 0) {
    set_client_index(from.client_index());
  }
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  using std::swap;
  effect_data_.InternalSwap(&other->effect_data_);
  skill_id_.Swap(&other->skill_id_);
  swap(user_, other->user_);
  swap(server_index_, other->server_index_);
  swap(client_index_, other->client_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSwapScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
const int ReqAckSwapScene::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckSwapScene();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSwapScene)
}
ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&transfer_type_, &from.transfer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _cached_size_ = 0;
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckSwapScene();
  return *internal_default_instance();
}

ReqAckSwapScene* ReqAckSwapScene::New(::google::protobuf::Arena* arena) const {
  ReqAckSwapScene* n = new ReqAckSwapScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckSwapScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 transfer_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckSwapScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckSwapScene)
  return false;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transfer_type = 1;
  if (this->transfer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transfer_type(), output);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // float x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // float y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // float z = 6;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckSwapScene)
}

::google::protobuf::uint8* ReqAckSwapScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transfer_type = 1;
  if (this->transfer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transfer_type(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // float x = 4;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // float y = 5;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // float z = 6;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSwapScene)
  return target;
}

size_t ReqAckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 transfer_type = 1;
  if (this->transfer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transfer_type());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());
  }

  // float x = 4;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 6;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSwapScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSwapScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSwapScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.transfer_type() != 0) {
    set_transfer_type(from.transfer_type());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(transfer_type_, other->transfer_type_);
  swap(scene_id_, other->scene_id_);
  swap(line_id_, other->line_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerChat::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerChat::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat::kPlayerIdFieldNumber;
const int ReqAckPlayerChat::kPlayerNameFieldNumber;
const int ReqAckPlayerChat::kChatChannelFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckPlayerChat();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_name().size() > 0) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_info().size() > 0) {
    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  ::memcpy(&chat_channel_, &from.chat_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
  _cached_size_ = 0;
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  ::protobuf_NFMsgShare_2eproto::InitDefaultsReqAckPlayerChat();
  return *internal_default_instance();
}

ReqAckPlayerChat* ReqAckPlayerChat::New(::google::protobuf::Arena* arena) const {
  ReqAckPlayerChat* n = new ReqAckPlayerChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
  ::memset(&chat_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  _internal_metadata_.Clear();
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chat_channel(static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatChannel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chat_type(static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chat_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerChat)
  return false;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->player_name(), output);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  if (this->chat_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chat_channel(), output);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  if (this->chat_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chat_type(), output);
  }

  // bytes chat_info = 5;
  if (this->chat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->chat_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerChat)
}

::google::protobuf::uint8* ReqAckPlayerChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->player_id_, deterministic, target);
  }

  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->player_name(), target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  if (this->chat_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->chat_channel(), target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  if (this->chat_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->chat_type(), target);
  }

  // bytes chat_info = 5;
  if (this->chat_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->chat_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->player_name());
  }

  // bytes chat_info = 5;
  if (this->chat_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->player_id_);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  if (this->chat_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_channel());
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.chat_info().size() > 0) {

    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
  if (from.chat_channel() != 0) {
    set_chat_channel(from.chat_channel());
  }
  if (from.chat_type() != 0) {
    set_chat_type(from.chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  player_name_.Swap(&other->player_name_);
  chat_info_.Swap(&other->chat_info_);
  swap(player_id_, other->player_id_);
  swap(chat_channel_, other->chat_channel_);
  swap(chat_type_, other->chat_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
